{"version":3,"file":"static/js/3596.2eb4fd0a.chunk.js","mappings":"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","sources":["../node_modules/recharts/es6/chart/BarChart.js","pages/thirdParty/recharts/Bar/Components/data.js","pages/thirdParty/recharts/Bar/Components/TinyBarChart.js","pages/thirdParty/recharts/Bar/Components/StackedBarChart.js","pages/thirdParty/recharts/Bar/Components/MixBarChart.js","pages/thirdParty/recharts/Bar/Components/CustomShapeBarChart.js","pages/thirdParty/recharts/Bar/Components/PositiveAndNegativeBarChart.js","pages/thirdParty/recharts/Bar/Components/BarChartStackedBySign.js","pages/thirdParty/recharts/Bar/Components/BiaxialBarChart.js","pages/thirdParty/recharts/Bar/index.js","webpack://ctic/./src/pages/thirdParty/recharts/Bar/Components/TinyBarChart.js?8d09","webpack://ctic/./src/pages/thirdParty/recharts/Bar/Components/StackedBarChart.js?ec28","webpack://ctic/./src/pages/thirdParty/recharts/Bar/Components/MixBarChart.js?3aa2","webpack://ctic/./src/pages/thirdParty/recharts/Bar/Components/CustomShapeBarChart.js?9cd3","webpack://ctic/./src/pages/thirdParty/recharts/Bar/Components/PositiveAndNegativeBarChart.js?526d","webpack://ctic/./src/pages/thirdParty/recharts/Bar/Components/BarChartStackedBySign.js?f9c1","webpack://ctic/./src/pages/thirdParty/recharts/Bar/Components/BiaxialBarChart.js?3427"],"sourcesContent":["/**\n * @fileOverview Bar Chart\n */\nimport { generateCategoricalChart } from './generateCategoricalChart';\nimport { Bar } from '../cartesian/Bar';\nimport { XAxis } from '../cartesian/XAxis';\nimport { YAxis } from '../cartesian/YAxis';\nimport { formatAxisMap } from '../util/CartesianUtils';\nexport var BarChart = generateCategoricalChart({\n  chartName: 'BarChart',\n  GraphicalChild: Bar,\n  defaultTooltipEventType: 'axis',\n  validateTooltipEventTypes: ['axis', 'item'],\n  axisComponents: [{\n    axisType: 'xAxis',\n    AxisComp: XAxis\n  }, {\n    axisType: 'yAxis',\n    AxisComp: YAxis\n  }],\n  formatAxisMap: formatAxisMap\n});","const data = [\r\n  {name: 'Page A', uv: 4000, pv: 2400, amt: 2400},\r\n  {name: 'Page B', uv: 3000, pv: 1398, amt: 2210},\r\n  {name: 'Page C', uv: 2000, pv: 9800, amt: 2290},\r\n  {name: 'Page D', uv: 2780, pv: 3908, amt: 2000},\r\n  {name: 'Page E', uv: 1890, pv: 4800, amt: 2181},\r\n  {name: 'Page F', uv: 2390, pv: 3800, amt: 2500},\r\n  {name: 'Page G', uv: 3490, pv: 4300, amt: 2100},\r\n];\r\nexport default data;\r\n","import React from 'react';\r\nimport {\r\n  Bar,\r\n  BarChart,\r\n  CartesianGrid,\r\n  Legend,\r\n  ResponsiveContainer,\r\n  Tooltip,\r\n  XAxis,\r\n  YAxis,\r\n} from 'recharts';\r\nimport data from './data';\r\n\r\nconst TinyBarChart = () => (\r\n  <ResponsiveContainer width='100%' height={200}>\r\n    <BarChart data={data} margin={{top: 10, right: 0, left: -25, bottom: 0}}>\r\n      <XAxis dataKey='name' />\r\n      <YAxis />\r\n      <CartesianGrid strokeDasharray='3 3' />\r\n      <Tooltip />\r\n      <Legend />\r\n      <Bar dataKey='pv' fill='#4299E1' />\r\n      <Bar dataKey='uv' fill='#F04F47' />\r\n    </BarChart>\r\n  </ResponsiveContainer>\r\n);\r\n\r\nexport default TinyBarChart;\r\n","import React from 'react';\r\nimport {\r\n  Bar,\r\n  BarChart,\r\n  CartesianGrid,\r\n  Legend,\r\n  ResponsiveContainer,\r\n  Tooltip,\r\n  XAxis,\r\n  YAxis,\r\n} from 'recharts';\r\nimport data from './data';\r\n\r\nconst StackedBarChart = () => (\r\n  <ResponsiveContainer width='100%' height={200}>\r\n    <BarChart data={data} margin={{top: 10, right: 0, left: -25, bottom: 0}}>\r\n      <XAxis dataKey='name' />\r\n      <YAxis />\r\n      <CartesianGrid strokeDasharray='3 3' />\r\n      <Tooltip />\r\n      <Legend />\r\n      <Bar dataKey='pv' stackId='a' fill='#4299E1' />\r\n      <Bar dataKey='uv' stackId='a' fill='#F04F47' />\r\n    </BarChart>\r\n  </ResponsiveContainer>\r\n);\r\n\r\nexport default StackedBarChart;\r\n","import React from 'react';\r\nimport {\r\n  Bar,\r\n  BarChart,\r\n  CartesianGrid,\r\n  Legend,\r\n  ResponsiveContainer,\r\n  Tooltip,\r\n  XAxis,\r\n  YAxis,\r\n} from 'recharts';\r\nimport data from './data';\r\n\r\nconst MixBarChart = () => (\r\n  <ResponsiveContainer width='100%' height={200}>\r\n    <BarChart data={data} margin={{top: 10, right: 0, left: -25, bottom: 0}}>\r\n      <XAxis dataKey='name' />\r\n      <YAxis />\r\n      <CartesianGrid strokeDasharray='3 3' />\r\n      <Tooltip />\r\n      <Legend />\r\n      <Bar dataKey='amt' stackId='a' fill='#4299E1' />\r\n      <Bar dataKey='pv' stackId='a' fill='#F04F47' />\r\n      <Bar dataKey='uv' fill='#F04F47' />\r\n    </BarChart>\r\n  </ResponsiveContainer>\r\n);\r\n\r\nexport default MixBarChart;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {\r\n  Bar,\r\n  BarChart,\r\n  CartesianGrid,\r\n  ResponsiveContainer,\r\n  XAxis,\r\n  YAxis,\r\n} from 'recharts';\r\nimport data from './data';\r\n\r\nconst getPath = (x, y, width, height) => {\r\n  return `M${x},${y + height}\r\n          C${x + width / 3},${y + height} ${x + width / 2},${y + height / 3} ${\r\n    x + width / 2\r\n  }, ${y}\r\n          C${x + width / 2},${y + height / 3} ${x + (2 * width) / 3},${\r\n    y + height\r\n  } ${x + width}, ${y + height}\r\n          Z`;\r\n};\r\n\r\nconst TriangleBar = (props) => {\r\n  const {fill, x, y, width, height} = props;\r\n\r\n  return <path d={getPath(x, y, width, height)} stroke='none' fill={fill} />;\r\n};\r\n\r\nTriangleBar.propTypes = {\r\n  fill: PropTypes.string,\r\n  x: PropTypes.number,\r\n  y: PropTypes.number,\r\n  width: PropTypes.number,\r\n  height: PropTypes.number,\r\n};\r\nconst CustomShapeBarChart = () => (\r\n  <ResponsiveContainer width='100%' height={200}>\r\n    <BarChart data={data} margin={{top: 10, right: 0, left: -25, bottom: 0}}>\r\n      <XAxis dataKey='name' />\r\n      <YAxis />\r\n      <CartesianGrid strokeDasharray='3 3' />\r\n      <Bar dataKey='uv' fill='#4299E1' shape={<TriangleBar />} label />\r\n    </BarChart>\r\n  </ResponsiveContainer>\r\n);\r\n\r\nexport default CustomShapeBarChart;\r\n","import React from 'react';\r\nimport {\r\n  Bar,\r\n  BarChart,\r\n  CartesianGrid,\r\n  Legend,\r\n  ReferenceLine,\r\n  ResponsiveContainer,\r\n  Tooltip,\r\n  XAxis,\r\n  YAxis,\r\n} from 'recharts';\r\n\r\nconst data = [\r\n  {name: 'Page A', uv: 4000, pv: 2400, amt: 2400},\r\n  {name: 'Page B', uv: -3000, pv: 1398, amt: 2210},\r\n  {name: 'Page C', uv: -2000, pv: -9800, amt: 2290},\r\n  {name: 'Page D', uv: 2780, pv: 3908, amt: 2000},\r\n  {name: 'Page E', uv: -1890, pv: 4800, amt: 2181},\r\n  {name: 'Page F', uv: 2390, pv: -3800, amt: 2500},\r\n  {name: 'Page G', uv: 3490, pv: 4300, amt: 2100},\r\n];\r\n\r\nconst PositiveAndNegativeBarChart = () => (\r\n  <ResponsiveContainer width='100%' height={200}>\r\n    <BarChart data={data} margin={{top: 10, right: 0, left: -25, bottom: 0}}>\r\n      <XAxis dataKey='name' />\r\n      <YAxis />\r\n      <CartesianGrid strokeDasharray='3 3' />\r\n      <Tooltip />\r\n      <Legend />\r\n      <ReferenceLine y={0} stroke='#000' />\r\n      <Bar dataKey='pv' fill='#4299E1' />\r\n      <Bar dataKey='uv' fill='#F04F47' />\r\n    </BarChart>\r\n  </ResponsiveContainer>\r\n);\r\n\r\nexport default PositiveAndNegativeBarChart;\r\n","import React from 'react';\r\nimport {\r\n  Bar,\r\n  BarChart,\r\n  CartesianGrid,\r\n  Legend,\r\n  ReferenceLine,\r\n  ResponsiveContainer,\r\n  Tooltip,\r\n  XAxis,\r\n  YAxis,\r\n} from 'recharts';\r\n\r\nconst data = [\r\n  {name: 'Page A', uv: 4000, pv: 2400, amt: 2400},\r\n  {name: 'Page B', uv: -3000, pv: 1398, amt: 2210},\r\n  {name: 'Page C', uv: -2000, pv: -9800, amt: 2290},\r\n  {name: 'Page D', uv: 2780, pv: 3908, amt: 2000},\r\n  {name: 'Page E', uv: -1890, pv: 4800, amt: 2181},\r\n  {name: 'Page F', uv: 2390, pv: -3800, amt: 2500},\r\n  {name: 'Page G', uv: 3490, pv: 4300, amt: 2100},\r\n];\r\n\r\nconst BarChartStackedBySign = () => (\r\n  <ResponsiveContainer width='100%' height={200}>\r\n    <BarChart\r\n      data={data}\r\n      stackOffset='sign'\r\n      margin={{top: 10, right: 0, left: -25, bottom: 0}}>\r\n      <XAxis dataKey='name' />\r\n      <YAxis />\r\n      <CartesianGrid strokeDasharray='3 3' />\r\n      <Tooltip />\r\n      <Legend />\r\n      <ReferenceLine y={0} stroke='#000' />\r\n      <Bar dataKey='pv' fill='#4299E1' stackId='stack' />\r\n      <Bar dataKey='uv' fill='#F04F47' stackId='stack' />\r\n    </BarChart>\r\n  </ResponsiveContainer>\r\n);\r\n\r\nexport default BarChartStackedBySign;\r\n","import React from 'react';\r\nimport {\r\n  Bar,\r\n  BarChart,\r\n  CartesianGrid,\r\n  Legend,\r\n  ResponsiveContainer,\r\n  Tooltip,\r\n  XAxis,\r\n  YAxis,\r\n} from 'recharts';\r\nimport data from './data';\r\n\r\nconst BiaxialBarChart = () => (\r\n  <ResponsiveContainer width='100%' height={200}>\r\n    <BarChart data={data} margin={{top: 10, right: 0, left: -25, bottom: 0}}>\r\n      <XAxis dataKey='name' />\r\n      <YAxis yAxisId='left' orientation='left' stroke='#03275b' />\r\n      <YAxis yAxisId='right' orientation='right' stroke='#F04F47' />\r\n      <CartesianGrid strokeDasharray='3 3' />\r\n      <Tooltip />\r\n      <Legend />\r\n      <Bar yAxisId='left' dataKey='pv' fill='#4299E1' />\r\n      <Bar yAxisId='right' dataKey='uv' fill='#F04F47' />\r\n    </BarChart>\r\n  </ResponsiveContainer>\r\n);\r\n\r\nexport default BiaxialBarChart;\r\n","import React from 'react';\r\nimport TinyBarChart from './Components/TinyBarChart';\r\nimport TinyBarChartSource from '!raw-loader!./Components/TinyBarChart';\r\nimport StackedBarChart from './Components/StackedBarChart';\r\nimport StackedBarChartSource from '!raw-loader!./Components/StackedBarChart';\r\nimport MixBarChart from './Components/MixBarChart';\r\nimport MixBarChartSource from '!raw-loader!./Components/MixBarChart';\r\nimport CustomShapeBarChart from './Components/CustomShapeBarChart';\r\nimport CustomShapeBarChartSource from '!raw-loader!./Components/CustomShapeBarChart';\r\nimport PositiveAndNegativeBarChart from './Components/PositiveAndNegativeBarChart';\r\nimport PositiveAndNegativeBarChartSource from '!raw-loader!./Components/PositiveAndNegativeBarChart';\r\nimport BarChartStackedBySign from './Components/BarChartStackedBySign';\r\nimport BarChartStackedBySignSource from '!raw-loader!./Components/BarChartStackedBySign';\r\nimport BiaxialBarChart from './Components/BiaxialBarChart';\r\nimport BiaxialBarChartSource from '!raw-loader!./Components/BiaxialBarChart';\r\n\r\nimport ComponentCard from '@crema/core/AppComponentCard';\r\nimport ComponentHeader from '@crema/core/AppComponentHeader';\r\nimport AppRowSimpleContainer from '@crema/core/AppRowContainer/AppRowSimpleContainer';\r\nimport {Col} from 'react-bootstrap';\r\n\r\nconst BarChart = () => {\r\n  return (\r\n    <>\r\n      <ComponentHeader\r\n        title='Bar Chart'\r\n        description='All svg elements can be added into the BarChart component, such as defs, linearGradient, etc.'\r\n        refUrl='http://recharts.org/en-US/api/BarChart/'\r\n      />\r\n\r\n      <AppRowSimpleContainer>\r\n        <Col xs={12} xl={6}>\r\n          <ComponentCard\r\n            title='Tiny Bar Chart'\r\n            component={TinyBarChart}\r\n            source={TinyBarChartSource}\r\n          />\r\n        </Col>\r\n        <Col xs={12} xl={6}>\r\n          <ComponentCard\r\n            title='Stacked Bar Chart'\r\n            component={StackedBarChart}\r\n            source={StackedBarChartSource}\r\n          />\r\n        </Col>\r\n        <Col xs={12} xl={6}>\r\n          <ComponentCard\r\n            title='Mix Bar Chart'\r\n            component={MixBarChart}\r\n            source={MixBarChartSource}\r\n          />\r\n        </Col>\r\n        <Col xs={12} xl={6}>\r\n          <ComponentCard\r\n            title='Custom Shape Bar Chart'\r\n            component={CustomShapeBarChart}\r\n            source={CustomShapeBarChartSource}\r\n          />\r\n        </Col>\r\n        <Col xs={12} xl={6}>\r\n          <ComponentCard\r\n            title='Positive And Negative Bar Chart'\r\n            component={PositiveAndNegativeBarChart}\r\n            source={PositiveAndNegativeBarChartSource}\r\n          />\r\n        </Col>\r\n        <Col xs={12} xl={6}>\r\n          <ComponentCard\r\n            title='Bar Chart Stacked By Sign'\r\n            component={BarChartStackedBySign}\r\n            source={BarChartStackedBySignSource}\r\n          />\r\n        </Col>\r\n        <Col xs={12} xl={6}>\r\n          <ComponentCard\r\n            title='Biaxial Bar Chart'\r\n            component={BiaxialBarChart}\r\n            source={BiaxialBarChartSource}\r\n          />\r\n        </Col>\r\n      </AppRowSimpleContainer>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default BarChart;\r\n","export default \"import React from 'react';\\r\\nimport {\\r\\n  Bar,\\r\\n  BarChart,\\r\\n  CartesianGrid,\\r\\n  Legend,\\r\\n  ResponsiveContainer,\\r\\n  Tooltip,\\r\\n  XAxis,\\r\\n  YAxis,\\r\\n} from 'recharts';\\r\\nimport data from './data';\\r\\n\\r\\nconst TinyBarChart = () => (\\r\\n  <ResponsiveContainer width='100%' height={200}>\\r\\n    <BarChart data={data} margin={{top: 10, right: 0, left: -25, bottom: 0}}>\\r\\n      <XAxis dataKey='name' />\\r\\n      <YAxis />\\r\\n      <CartesianGrid strokeDasharray='3 3' />\\r\\n      <Tooltip />\\r\\n      <Legend />\\r\\n      <Bar dataKey='pv' fill='#4299E1' />\\r\\n      <Bar dataKey='uv' fill='#F04F47' />\\r\\n    </BarChart>\\r\\n  </ResponsiveContainer>\\r\\n);\\r\\n\\r\\nexport default TinyBarChart;\\r\\n\";","export default \"import React from 'react';\\r\\nimport {\\r\\n  Bar,\\r\\n  BarChart,\\r\\n  CartesianGrid,\\r\\n  Legend,\\r\\n  ResponsiveContainer,\\r\\n  Tooltip,\\r\\n  XAxis,\\r\\n  YAxis,\\r\\n} from 'recharts';\\r\\nimport data from './data';\\r\\n\\r\\nconst StackedBarChart = () => (\\r\\n  <ResponsiveContainer width='100%' height={200}>\\r\\n    <BarChart data={data} margin={{top: 10, right: 0, left: -25, bottom: 0}}>\\r\\n      <XAxis dataKey='name' />\\r\\n      <YAxis />\\r\\n      <CartesianGrid strokeDasharray='3 3' />\\r\\n      <Tooltip />\\r\\n      <Legend />\\r\\n      <Bar dataKey='pv' stackId='a' fill='#4299E1' />\\r\\n      <Bar dataKey='uv' stackId='a' fill='#F04F47' />\\r\\n    </BarChart>\\r\\n  </ResponsiveContainer>\\r\\n);\\r\\n\\r\\nexport default StackedBarChart;\\r\\n\";","export default \"import React from 'react';\\r\\nimport {\\r\\n  Bar,\\r\\n  BarChart,\\r\\n  CartesianGrid,\\r\\n  Legend,\\r\\n  ResponsiveContainer,\\r\\n  Tooltip,\\r\\n  XAxis,\\r\\n  YAxis,\\r\\n} from 'recharts';\\r\\nimport data from './data';\\r\\n\\r\\nconst MixBarChart = () => (\\r\\n  <ResponsiveContainer width='100%' height={200}>\\r\\n    <BarChart data={data} margin={{top: 10, right: 0, left: -25, bottom: 0}}>\\r\\n      <XAxis dataKey='name' />\\r\\n      <YAxis />\\r\\n      <CartesianGrid strokeDasharray='3 3' />\\r\\n      <Tooltip />\\r\\n      <Legend />\\r\\n      <Bar dataKey='amt' stackId='a' fill='#4299E1' />\\r\\n      <Bar dataKey='pv' stackId='a' fill='#F04F47' />\\r\\n      <Bar dataKey='uv' fill='#F04F47' />\\r\\n    </BarChart>\\r\\n  </ResponsiveContainer>\\r\\n);\\r\\n\\r\\nexport default MixBarChart;\\r\\n\";","export default \"import React from 'react';\\r\\nimport PropTypes from 'prop-types';\\r\\nimport {\\r\\n  Bar,\\r\\n  BarChart,\\r\\n  CartesianGrid,\\r\\n  ResponsiveContainer,\\r\\n  XAxis,\\r\\n  YAxis,\\r\\n} from 'recharts';\\r\\nimport data from './data';\\r\\n\\r\\nconst getPath = (x, y, width, height) => {\\r\\n  return `M${x},${y + height}\\r\\n          C${x + width / 3},${y + height} ${x + width / 2},${y + height / 3} ${\\r\\n    x + width / 2\\r\\n  }, ${y}\\r\\n          C${x + width / 2},${y + height / 3} ${x + (2 * width) / 3},${\\r\\n    y + height\\r\\n  } ${x + width}, ${y + height}\\r\\n          Z`;\\r\\n};\\r\\n\\r\\nconst TriangleBar = (props) => {\\r\\n  const {fill, x, y, width, height} = props;\\r\\n\\r\\n  return <path d={getPath(x, y, width, height)} stroke='none' fill={fill} />;\\r\\n};\\r\\n\\r\\nTriangleBar.propTypes = {\\r\\n  fill: PropTypes.string,\\r\\n  x: PropTypes.number,\\r\\n  y: PropTypes.number,\\r\\n  width: PropTypes.number,\\r\\n  height: PropTypes.number,\\r\\n};\\r\\nconst CustomShapeBarChart = () => (\\r\\n  <ResponsiveContainer width='100%' height={200}>\\r\\n    <BarChart data={data} margin={{top: 10, right: 0, left: -25, bottom: 0}}>\\r\\n      <XAxis dataKey='name' />\\r\\n      <YAxis />\\r\\n      <CartesianGrid strokeDasharray='3 3' />\\r\\n      <Bar dataKey='uv' fill='#4299E1' shape={<TriangleBar />} label />\\r\\n    </BarChart>\\r\\n  </ResponsiveContainer>\\r\\n);\\r\\n\\r\\nexport default CustomShapeBarChart;\\r\\n\";","export default \"import React from 'react';\\r\\nimport {\\r\\n  Bar,\\r\\n  BarChart,\\r\\n  CartesianGrid,\\r\\n  Legend,\\r\\n  ReferenceLine,\\r\\n  ResponsiveContainer,\\r\\n  Tooltip,\\r\\n  XAxis,\\r\\n  YAxis,\\r\\n} from 'recharts';\\r\\n\\r\\nconst data = [\\r\\n  {name: 'Page A', uv: 4000, pv: 2400, amt: 2400},\\r\\n  {name: 'Page B', uv: -3000, pv: 1398, amt: 2210},\\r\\n  {name: 'Page C', uv: -2000, pv: -9800, amt: 2290},\\r\\n  {name: 'Page D', uv: 2780, pv: 3908, amt: 2000},\\r\\n  {name: 'Page E', uv: -1890, pv: 4800, amt: 2181},\\r\\n  {name: 'Page F', uv: 2390, pv: -3800, amt: 2500},\\r\\n  {name: 'Page G', uv: 3490, pv: 4300, amt: 2100},\\r\\n];\\r\\n\\r\\nconst PositiveAndNegativeBarChart = () => (\\r\\n  <ResponsiveContainer width='100%' height={200}>\\r\\n    <BarChart data={data} margin={{top: 10, right: 0, left: -25, bottom: 0}}>\\r\\n      <XAxis dataKey='name' />\\r\\n      <YAxis />\\r\\n      <CartesianGrid strokeDasharray='3 3' />\\r\\n      <Tooltip />\\r\\n      <Legend />\\r\\n      <ReferenceLine y={0} stroke='#000' />\\r\\n      <Bar dataKey='pv' fill='#4299E1' />\\r\\n      <Bar dataKey='uv' fill='#F04F47' />\\r\\n    </BarChart>\\r\\n  </ResponsiveContainer>\\r\\n);\\r\\n\\r\\nexport default PositiveAndNegativeBarChart;\\r\\n\";","export default \"import React from 'react';\\r\\nimport {\\r\\n  Bar,\\r\\n  BarChart,\\r\\n  CartesianGrid,\\r\\n  Legend,\\r\\n  ReferenceLine,\\r\\n  ResponsiveContainer,\\r\\n  Tooltip,\\r\\n  XAxis,\\r\\n  YAxis,\\r\\n} from 'recharts';\\r\\n\\r\\nconst data = [\\r\\n  {name: 'Page A', uv: 4000, pv: 2400, amt: 2400},\\r\\n  {name: 'Page B', uv: -3000, pv: 1398, amt: 2210},\\r\\n  {name: 'Page C', uv: -2000, pv: -9800, amt: 2290},\\r\\n  {name: 'Page D', uv: 2780, pv: 3908, amt: 2000},\\r\\n  {name: 'Page E', uv: -1890, pv: 4800, amt: 2181},\\r\\n  {name: 'Page F', uv: 2390, pv: -3800, amt: 2500},\\r\\n  {name: 'Page G', uv: 3490, pv: 4300, amt: 2100},\\r\\n];\\r\\n\\r\\nconst BarChartStackedBySign = () => (\\r\\n  <ResponsiveContainer width='100%' height={200}>\\r\\n    <BarChart\\r\\n      data={data}\\r\\n      stackOffset='sign'\\r\\n      margin={{top: 10, right: 0, left: -25, bottom: 0}}>\\r\\n      <XAxis dataKey='name' />\\r\\n      <YAxis />\\r\\n      <CartesianGrid strokeDasharray='3 3' />\\r\\n      <Tooltip />\\r\\n      <Legend />\\r\\n      <ReferenceLine y={0} stroke='#000' />\\r\\n      <Bar dataKey='pv' fill='#4299E1' stackId='stack' />\\r\\n      <Bar dataKey='uv' fill='#F04F47' stackId='stack' />\\r\\n    </BarChart>\\r\\n  </ResponsiveContainer>\\r\\n);\\r\\n\\r\\nexport default BarChartStackedBySign;\\r\\n\";","export default \"import React from 'react';\\r\\nimport {\\r\\n  Bar,\\r\\n  BarChart,\\r\\n  CartesianGrid,\\r\\n  Legend,\\r\\n  ResponsiveContainer,\\r\\n  Tooltip,\\r\\n  XAxis,\\r\\n  YAxis,\\r\\n} from 'recharts';\\r\\nimport data from './data';\\r\\n\\r\\nconst BiaxialBarChart = () => (\\r\\n  <ResponsiveContainer width='100%' height={200}>\\r\\n    <BarChart data={data} margin={{top: 10, right: 0, left: -25, bottom: 0}}>\\r\\n      <XAxis dataKey='name' />\\r\\n      <YAxis yAxisId='left' orientation='left' stroke='#03275b' />\\r\\n      <YAxis yAxisId='right' orientation='right' stroke='#F04F47' />\\r\\n      <CartesianGrid strokeDasharray='3 3' />\\r\\n      <Tooltip />\\r\\n      <Legend />\\r\\n      <Bar yAxisId='left' dataKey='pv' fill='#4299E1' />\\r\\n      <Bar yAxisId='right' dataKey='uv' fill='#F04F47' />\\r\\n    </BarChart>\\r\\n  </ResponsiveContainer>\\r\\n);\\r\\n\\r\\nexport default BiaxialBarChart;\\r\\n\";"],"names":["BarChart","generateCategoricalChart","chartName","GraphicalChild","Bar","defaultTooltipEventType","validateTooltipEventTypes","axisComponents","axisType","AxisComp","XAxis","YAxis","formatAxisMap","name","uv","pv","amt","ResponsiveContainer","width","height","data","margin","top","right","left","bottom","dataKey","CartesianGrid","strokeDasharray","Tooltip","Legend","fill","stackId","getPath","x","y","TriangleBar","props","d","stroke","shape","label","ReferenceLine","stackOffset","yAxisId","orientation","title","description","refUrl","AppRowSimpleContainer","Col","xs","xl","component","TinyBarChart","source","StackedBarChart","MixBarChart","CustomShapeBarChart","PositiveAndNegativeBarChart","BarChartStackedBySign","BiaxialBarChart"],"sourceRoot":""}